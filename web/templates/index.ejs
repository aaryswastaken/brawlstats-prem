<!--suppress JSCheckFunctionSignatures -->
<script src="https://cdn.jsdelivr.net/npm/d3@6"></script>
<script src="https://cdn.jsdelivr.net/npm/@observablehq/plot@0.1"></script>
<title>User stats</title>

<table>
    <tr>
        <th colspan="2"><div id="trophies"></div></th>
        <th>
            <div id="dateSel">
                <div>
                    <label id="start-timeLabel" for="start-time">Start time:</label>
                    <input type="datetime-local" id="start-time" name="start-time">
                    <input type="checkbox" id="startEnable">

                </div>

                <div>
                    <label id="stop-timeLabel" for="stop-time">Stop time:</label>
                    <input type="datetime-local" id="stop-time" name="stop-time">
                    <input type="checkbox" id="stopEnable">
                </div>
            </div>
            <button id="datereset">Reset</button>
        </th>
    </tr>

    <tr>
        <th colspan="2"><div id="brawlers"></div></th>
        <th>
            <div id="selection"></div>
            <div id="selButtons">
                <button id="refreshBrawler">Refresh</button>
                <button onclick="unselAllBrawlers()">Unselect All</button>
                <button onclick="selAllBrawlers()">Select All</button>
            </div>
        </th>
    </tr>

    <tr>
        <th><div id="ranks"></div></th>
        <th><div id="rankHisto"></div></th>
    </tr>
</table>


<style>
    table {
        width: 100%;
    }

    #selection {
        display: flex;
    }

    #ranks {
        display: flex;
        flex-direction: row;
    }

    /* th > div {
        margin-top: 30px;
        margin-bottom: 10px;
    } */

    #dateSel > * {
        margin: 20px;
    }
</style>

<script>
    let graphs = JSON.parse("<%= JSON.stringify(graphs) %>".replace(/&#34;/gm, "\""));

    const maxSel = 10;

    let stdParam = {
        marginRight: 50,
        marginTop: 20,
        marginBottom: 100,
        width: Number.parseInt((window.outerWidth * 3 / 5).toString().split(".")[0], 10)
    }

    function setupDateSelection() {
        let selREQ = new XMLHttpRequest();

        selREQ.onreadystatechange = function () {
            if (this.readyState === 4 && this.status === 200) {
                let dates = JSON.parse(this.responseText);

                let parsed = {
                    start: new Date(dates.start),
                    end: new Date(dates.end)
                }

                console.log({dates, parsed});

                document.getElementById("start-time").min = parsed.start;
                document.getElementById("stop-time").min = parsed.start;

                document.getElementById("start-time").max = parsed.end;
                document.getElementById("stop-time").max = parsed.end;

                parsed.start.setMinutes(parsed.start.getMinutes() - parsed.start.getTimezoneOffset());
                parsed.end.setMinutes(parsed.end.getMinutes() - parsed.end.getTimezoneOffset());

                let dateReset = () => {
                    document.getElementById('start-time').value = parsed.start.toISOString().slice(0, 16);
                    document.getElementById('stop-time').value = parsed.end.toISOString().slice(0, 16);
                }

                document.getElementById("datereset").onclick = dateReset;
                dateReset();
            }
        }

        selREQ.open("POST", "/interval", true);
        selREQ.send();
    }

    function setupSel(then=()=>{}) {
        let selREQ = new XMLHttpRequest();

        selREQ.onreadystatechange = function () {
            if (this.readyState === 4 && this.status === 200) {
                let brawlers = JSON.parse(this.responseText);

                let id = 0;

                brawlers.map(b => b.name).forEach(brawler => {
                    if(id % maxSel === 0) {
                        let s = document.createElement("div");
                        s.id = `selection${ (id - id % maxSel) / maxSel }`;
                        document.getElementById("selection").appendChild(s);
                    }
                    let l = brawler.toLowerCase();
                    let f = brawler.slice(0, 1) + l.slice(1, brawler.length);
                    document.getElementById(`selection${ (id - id % maxSel) / maxSel }`).innerHTML += `<div id="${l}Div"><input type="checkbox" class="selection" id="${l}" checked> <label for="${l}" id="${l}Label">${f}</label></div>`;

                    id += 1;
                });

                console.log(brawlers);

                document.getElementById("refreshBrawler").onclick = then;

                setupDateSelection();
                then();
            }
        }

        selREQ.open("POST", "/brawlers", true);
        selREQ.send();
    }

    function getBrawlerSelection() {
        let selDOM = document.getElementsByClassName("selection");
        let sel = [];

        Array.from(selDOM).forEach(e => {
            if(e.checked) {
                sel.push(e.id.toUpperCase());
            }
        });

        return sel;
    }

    function brawlerSuffix() {
        return `&brawler=${JSON.stringify(getBrawlerSelection())}`;
    }

    function fetchTimeSel() {
        return {start: new Date(document.getElementById('start-time').value), end: new Date(document.getElementById('stop-time').value)}
    }

    function timeEn() {
        return {start: document.getElementById("startEnable").checked, stop: document.getElementById("stopEnable").checked}
    }

    function timeSelSuffix() {
        let start = `&start_time=${fetchTimeSel().start.getTime()}`;
        let stop = `&end_time=${fetchTimeSel().end.getTime()}`;
        let ans = (document.getElementById("startEnable").checked ? start:"")+(document.getElementById("stopEnable").checked ? stop:"");
        console.log({timeSelSuffix: ans})
        return ans
    }

    function refreshTRGraph () {
        var req = new XMLHttpRequest();

        req.onreadystatechange = function () {
            if (this.readyState === 4 && this.status === 200) {
                let json = JSON.parse(this.responseText);

                console.log(json);

                // let bounded = [
                //     {epoch: fetchTimeSel().end.getTime(), trophies: json.ans[0].player.trophies},
                //     ...json.ans.map(res => {return {epoch: new Date(res.epoch).getTime(), trophies: res.player.trophies};}),
                //     {epoch: fetchTimeSel().start.getTime(), trophies: json.ans[json.ans.length-1].player.trophies}
                // ];
                let bounded = json.ans.map(res => {return {epoch: new Date(res.epoch).getTime(), trophies: res.player.trophies};});

                if(timeEn().start) {
                    console.log("START EN");
                    bounded = [...bounded, {epoch: fetchTimeSel().start.getTime(), trophies: json.ans[json.ans.length-1].player.trophies}];
                }

                if(timeEn().stop) {
                    console.log("STOP EN");
                    bounded = [{epoch: fetchTimeSel().end.getTime(), trophies: json.ans[0].player.trophies}, ...bounded]
                }

                document.getElementById("trophies").innerHTML = "";
                document.getElementById("trophies").appendChild(Plot.plot({
                    ...stdParam,
                    x: {
                        type: "time",
                        // domain: [fetchTimeSel().start.getTime(), fetchTimeSel().end.getTime()]  // DEPRECATED
                    },
                    y: {
                        grid: true
                    },
                    marks: [
                        Plot.line(bounded, {x: "epoch", y: "trophies"}),
                        Plot.text(bounded, Plot.selectFirst({x: "epoch", y: "trophies", text: "trophies", textAnchor: "start", dx: 3}))
                    ]
                }))
            }
        }
        req.open("POST", '/api?need_player=1&project={"epoch": 1, "player.trophies": 1}'+timeSelSuffix(), true);
        req.send();
    }

    var refreshBrawlers = () => {
        let brawlerREQ = new XMLHttpRequest();

        brawlerREQ.onreadystatechange = function () {
            if (this.readyState === 4 && this.status === 200) {
                let json = JSON.parse(this.responseText);

                let develop = [];
                let sel = getBrawlerSelection();
                let brawlers = sel;

                json.ans.forEach(e => {
                    e.player.brawlers.forEach(b => {
                        if(sel.includes(b.name)) {
                            develop.push({epoch: new Date(e.epoch).getTime(), trophies: b.trophies, brawler: b.name})
                        }

                        // if (!brawlers.includes(b.name)) {
                        //     brawlers.push(b.name);
                        // }
                    });
                });

                let first = [];
                let last = [];

                brawlers.forEach((b) => {
                    first.push(json.ans[0].player.brawlers
                        .filter(b2 => b2.name === b).map((x) => {return {epoch: fetchTimeSel().end.getTime(), trophies: x.trophies, brawler: b};})[0]);
                    last.push(json.ans[json.ans.length-1].player.brawlers
                        .filter(b2 => b2.name === b).map((x) => {return {epoch: fetchTimeSel().start.getTime(), trophies: x.trophies, brawler: b};})[0]);
                })

                console.log("===============");
                console.log({first, last});
                console.log("===============");

                // develop = [...first, ...develop, ...last]

                if(timeEn().start) {
                    console.log("START EN");
                    develop = [...develop, ...last];
                }

                if(timeEn().stop) {
                    console.log("STOP EN");
                    develop = [...first, ...develop];
                }

                console.log("------------------------------------------");
                console.log({develop});

                document.getElementById("brawlers").innerHTML = "";

                document.getElementById("brawlers").appendChild(Plot.plot({
                    ...stdParam,
                    x: {
                        type: "time",
                        // domain: [fetchTimeSel().start.getTime(), fetchTimeSel().end.getTime()]
                    },
                    y: {
                        grid: true
                    },
                    marks: [
                        Plot.line(develop, {x: "epoch", y: "trophies", z: "brawler", stroke: "brawler", strokeWidth: 1}),
                        Plot.text(develop, Plot.selectFirst({x: "epoch", y: "trophies", z: "brawler", text: "brawler", textAnchor: "start", dx: 3}))
                    ]
                }))
            }
        }
        brawlerREQ.open("POST", `/api?need_player=1&project={"epoch": 1, "player.brawlers": 1}`+timeSelSuffix(), true);
        brawlerREQ.send();
    }

    var unselAllBrawlers = () => {
        Array.from(document.getElementsByClassName("selection")).forEach(e => {
            e.checked = false;
        })
    }

    var selAllBrawlers = () => {
        Array.from(document.getElementsByClassName("selection")).forEach(e => {
            e.checked = true;
        })
    }

    /////////////////////////////////////////////////////
    var refreshRankGraphLAST = () => {
        let matchsREQ = new XMLHttpRequest();

        let sel = getBrawlerSelection();

        matchsREQ.onreadystatechange = function () {
            if(this.readyState === 4 && this.status === 200) {
                let json = JSON.parse(this.responseText);

                let payload = [];

                payload = json.ans.map(e => {
                    return {rank: e.battle.rank, epoch: new Date(e.epoch).getTime(), brawler: e.extracted.player.brawler.name};
                });

                document.getElementById("ranks").innerHTML = "";
                document.getElementById("ranks").appendChild(Plot.plot({
                    ...stdParam,
                    x: {
                        type: "time",
                    },
                    y: {
                        grid: true,
                    },
                    marks: [
                        // Plot.dot(payload, {x: "epoch", y: "rank", r: 3, stroke: "brawler"})
                    ]
                }));
            }
        }

        matchsREQ.open("POST", `/api?mode=["soloShowdown"]&project={"epoch": 1, "battle.rank": 1, "extracted.player.brawler.name": 1}&brawler=${JSON.stringify(sel)}`, true);
        matchsREQ.send();
        console.log("SENT")
    }

    var refreshRankGraph = () => {
        let matchsREQ = new XMLHttpRequest();

        let sel = getBrawlerSelection();

        matchsREQ.onreadystatechange = function () {
            if(this.readyState === 4 && this.status === 200) {
                let json = JSON.parse(this.responseText);

                let last = "";
                let sum = 0;
                let divider = 0;

                let computed = [];
                let averages = []

                let n = 0;
                let maxDays = 6;

                let min = Math.min(...json.soloRank.map(r => r.battleCount));
                let max = Math.max(...json.soloRank.map(r => r.battleCount));

                let rThreshold = (min + (max - min)*0.8)-0.01;

                // -------------- CALCULATE AVERAGES TROPHIES ---------

                json.soloRank.forEach((rank) => {
                    if (n < maxDays) {
                        if (rank.date !== last) {
                            if (sum !== 0) {
                                n += 1;

                                averages.push({
                                    average: sum / divider,
                                    date: last
                                });

                                sum = 0;
                                divider = 0;
                            }

                            last = rank.date;
                        }

                        computed.push({
                            ...rank,
                            avg: 0,
                            color: rank.battleCount >= rThreshold
                        });

                        sum += rank.battleCount * rank.rank;
                        divider += rank.battleCount;
                    }
                });

                averages.push({
                    average: sum / divider,
                    date: last
                });

                console.log({averages, min, max, computed})
                // -------------- END OF COMPUTING --------------

                document.getElementById("ranks").innerHTML = "";
                document.getElementById("ranks").appendChild(Plot.plot({
                    height: 480,
                    x: {
                        axis: "top",
                        label: "Date"
                    },
                    y: {
                        label: "Rank"
                    },
                    color: {
                        scheme: "ylorbr"
                    },
                    marks: [
                        Plot.cell(computed, {x: "date", y: "rank", fill: "battleCount"}),
                        Plot.text(computed.filter(x => x.color), {x: "date", y: "rank", text: "battleCount", fontSize: 12, fill: "#fff"}),
                        Plot.text(computed.filter(x => !x.color), {x: "date", y: "rank", text: "battleCount", fontSize: 12, fill: "#000"})
                    ]
                }));

                document.getElementById("ranks").appendChild(Plot.plot({
                    height: 480,
                    y: {
                        grid: true,
                        domain: [0, 10]
                    },
                    marks: [
                        Plot.line(averages, {x: "date", y: "average"}),
                        Plot.dot(averages, {x: "date", y: "average"}),
                        Plot.text(averages, {x: "date", y: "average", text: (n)=>{return n.average.toFixed(2)}, fontSize: 15, dy: -10})
                    ]
                }));
            }
        }

        matchsREQ.open("POST", `/ranks`, true);
        matchsREQ.send();
        console.log("SENT")
    }

    setupSel(() => {
        refreshTRGraph();
        refreshBrawlers();
        refreshRankGraph();
    });
</script>
